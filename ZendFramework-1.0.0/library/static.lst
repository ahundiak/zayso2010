    public static function getInstance()
    static function getTmpDir()
    private static function _validateIdOrTag($string)
    private static function _validateTagsArray($tags)
    public static $availableFrontends = array('Core', 'Output', 'Class', 'File', 'Function', 'Page');
    public static $availableBackends = array('File', 'Sqlite', 'Memcached', 'Apc', 'ZendPlatform');
    public static function factory($frontend, $backend, $frontendOptions = array(), $backendOptions = array())
    public static function throwException($msg)
    protected static function _normalizeName($name)
    static public function addHelper(Zend_Controller_Action_Helper_Abstract $helper)
    static public function addPrefix($prefix)
    static public function resetHelpers()
    static public function addPath($path, $prefix = 'Zend_Controller_Action_Helper')
    protected static function _normalizeHelperName($name)
    public static function getStaticHelper($name)
    public static function getExistingHelper($name)
    public static function getExistingHelpers()
    public static function hasHelper($name)
    public static function removeHelper($name)
    protected static function _loadHelper($name)
    public static function getInstance()
    public static function run($controllerDirectory)
    public static function getInstance(Zend_Config $config); 
    public static function getInstance(Zend_Config $config)
    public static function getInstance(Zend_Config $config) 
    public static function getInstance(Zend_Config $config)
    public static function getInstance(Zend_Config $config)
    public static function City($city, $horizon = false) {
    public static function getCityList() {
    protected static function isYearLeapYear($year)
    protected static function dayOfWeek($year, $month, $day)
    public static function setOptions(array $options = array())
    public static function checkLeapYear($year)
    public static function now($locale = null)
    public static function isDate($date, $format = null, $locale = null)
    public static final function setDefaultAdapter($db = null)
    public static final function getDefaultAdapter()
    protected static final function _setupAdapter($db)
    public static function setDefaultMetadataCache($metadataCache = null)
    public static function getDefaultMetadataCache()
    protected static final function _setupMetadataCache($metadataCache)
    public static function factory($adapterName, array $config = array())
    public static function getSapi()
    public static function setSapi($sapi)
    public static function dump($var, $label=null, $echo=true)
    public static function setHttpClient(Zend_Http_Client $httpClient)
    public static function getHttpClient()
    public static function setHttpMethodOverride($override = true)
    public static function getHttpMethodOverride()
    public static function lookupNamespace($prefix)
    public static function registerNamespace($prefix, $namespaceURI)
    public static function import($uri)
    public static function importString($string)
    public static function importFile($filename)
    public static function findFeeds($uri)
    public static function importArray(array $data, $format = 'atom')
    public static function importBuilder(Zend_Feed_Builder_Interface $builder, $format = 'atom')
    public static function get($value, $classBaseName, array $args = array(), $namespaces = array())
    public static function formatTimestamp($timestamp)
    protected static $_staticHttpClient = null;
    protected static $_httpMethodOverride = false;
    protected static $_maxRedirects = 5;
    public static function setStaticHttpClient(Zend_Http_Client $httpClient)
    public static function getStaticHttpClient()
    public static function setHttpMethodOverride($override = true)
    public static function getHttpMethodOverride()
    public static function setMaxRedirects($maxRedirects) 
    public static function getMaxRedirects()
    public static function import($uri, $client = null, $className='Zend_Gdata_App_Feed')
    public static function importString($string, $className='Zend_Gdata_App_Feed')
    public static function importFile($filename, 
     public static function getAuthSubTokenUri($next, $scope, $secure=0, $session=0)
    public static function getAuthSubSessionToken($token, $client = null)
    public static function AuthSubRevokeToken($token, $client = null)
    public static function getAuthSubTokenInfo($token, $client = null)
    public static function getHttpClient($token, $client = null)
    public static function getHttpClient($email, $password, $service = 'xapi',
    public static function encodeFormData($boundary, $name, $value, $filename = null, $headers = array()) {
    public static function encodeAuthHeader($user, $password, $type = self::AUTH_BASIC)
    public static function fromString($cookieStr, $ref_uri = null)
    public static function fromResponse(Zend_Http_Response $response, $ref_uri)
	protected static $messages = array(
    public static function responseCodeAsText($code = null, $http11 = true)
    public static function extractCode($response_str)
    public static function extractMessage($response_str)
    public static function extractVersion($response_str)
    public static function extractHeaders($response_str)
    public static function extractBody($response_str)
    public static function decodeChunkedBody($body)
    public static function decodeGzip($body)
    public static function decodeDeflate($body)
    public static function fromString($response_str)
    public static function decode($source = null, $objectDecodeType = Zend_Json::TYPE_ARRAY)
    public static function encode($value, $cycleCheck = false)
    private static function _encodeConstants(ReflectionClass $cls)
    private static function _encodeMethods(ReflectionClass $cls)
    private static function _encodeVariables(ReflectionClass $cls)
    public static function encodeClass($className, $package = '')
    public static function encodeClasses(array $classNames, $package = '')
    public static function decode($encodedValue, $objectDecodeType = Zend_Json::TYPE_ARRAY)
    public static function encode($valueToEncode, $cycleCheck = false)
    public static function loadClass($class, $dirs = null)
    public static function loadFile($filename, $dirs = null, $once = false)
    protected static function _includeFile($filespec, $once = false)
    public static function isReadable($filename)
    public static function autoload($class)
    public static function registerAutoload($class = 'Zend_Loader')
    private static function _readFile($locale, $path, $attribute, $value)
    private static function _findRoute($locale, $path, $attribute, $value)
    private static function _getFile($locale, $path, $attribute = false, $value = false)
    public static function getContent($locale, $path, $value = false)
    public static function setOptions(array $options = array())
    private static function checkOptions(array $options = array())
    public static function convertNumerals($input, $from, $to = null)
    public static function getNumber($input, array $options = array())
    public static function toNumber($value, array $options = array())
    public static function isNumber($input, array $options = array())
    public static function getFloat($input, array $options = array())
    public static function toFloat($value, array $options = array())
    public static function isFloat($value, array $options = array())
    public static function getInteger($input, array $options = array())
    public static function toInteger($value, array $options = array())
    public static function isInteger($value, array $options = array())
    public static function convertPhpToIsoFormat($format)
    private static function _parseDate($date, $options)
    protected static function _replaceMonth(&$number, $monthlist)
    public static function getDateFormat($locale = null)
    public static function getDate($date, array $options = array())
    public static function checkDateFormat($date, array $options = array())
    public static function getTimeFormat($locale = null)
    public static function getTime($time, array $options = array())
    public static function disable()
    public static function isBcmathDisabled()
    public static function round($op1, $precision = 0)
    public static function normalize($value)
    public static function isLocale($locale, $create = false)
    protected static function _formatHeader(&$item, $key, $prefix)
     * @static
    public static function setDefaultTransport(Zend_Mail_Transport_Abstract $transport)
    public static function factory($backend, $backendOptions = array())
    public static function splitMime($body, $boundary)
    public static function splitMessageStruct($message, $boundary, $EOL = Zend_Mime::LINEEND)
    public static function splitMessage($message, &$headers, &$body, $EOL = Zend_Mime::LINEEND)
    public static function splitContentType($type, $wantedPart = null)
    public static function splitHeaderField($field, $wantedPart = null, $firstName = 0)
    public static function decodeQuotedPrintable($string)
    protected static function _disassembleMime($body, $boundary)
    public static function createFromMessage($message, $boundary, $EOL = Zend_Mime::LINEEND)
    public static function encode($str, $encoding)
    public static function cmapWithTypeData($cmapType, $cmapData)
    public static function color($color)
    public static function namedColor($color)
    public static function escape($inStr)
    public static function unescape($inStr)
    public static function escape($inStr)
    public static function unescape($inStr)
    public static function escape($inStr)
    public static function unescape($inStr)
    static public function createFactory($objCount)
    public static function encode($data, $params = null)
    public static function decode($data, $params = null)
    public static function encode($data, $params = null)
    public static function decode($data, $params = null)
    public static function encode($data, $params = null)
    public static function decode($data, $params = null)
    private static function _getEarlyChangeValue($params)
    public static function encode($data, $params = null)
    public static function decode($data, $params = null)
    private static function _paeth($a, $b, $c)
    private static function _getPredictorValue(&$params)
    private static function _getColorsValue(&$params)
    private static function _getBitsPerComponentValue(&$params)
    private static function _getColumnsValue(&$params)
    protected static function _applyEncodeParams($data, $params) {
    protected static function _applyDecodeParams($data, $params) {
    abstract public static function encode($data, $params = null);
    abstract public static function decode($data, $params = null);
    public static function fontWithName($name, $embeddingOptions = 0)
    public static function fontWithPath($filePath, $embeddingOptions = 0)
    protected static function _extractTrueTypeFont($dataSource, $embeddingOptions)
    public static function imageWithPath($filePath)
    protected static function _extractJpegImage($dataSource)
    protected static function _extractPngImage($dataSource)
    protected static function _extractTiffImage($dataSource)
    public static function factory($filename) {
    public static function isWhiteSpace($chCode)
    public static function isDelimiter($chCode )
    public static function parseIntFromStream($stream, $offset, $size)
    static public function getMemoryManager()
    static public function setMemoryManager(Zend_Memory_Manager $memoryManager)
    public static function parse(&$source = null, $revision = null)
    public static function load($source = null, $revision = null)
    public static function pdfDate($timestamp = null)
    public static function getInstance()
    public static function setInstance(Zend_Registry $registry)
    protected static function init()
    public static function setClassName($registryClassName = 'Zend_Registry')
    public static function _unsetInstance()
    public static function get($index)
    public static function set($index, $value)
    public static function isRegistered($index)
    private static function _isAlpha($char)
    private static function _isAlNum($char)
    public static function setDefault(Zend_Search_Lucene_Analysis_Analyzer $analyzer)
    public static function getDefault()
    public static function loadHTML($data, $storeContent = false)
    public static function loadHTMLFile($file, $storeContent = false)
    public static function Keyword($name, $value, $encoding = '')
    public static function UnIndexed($name, $value, $encoding = '')
    public static function Binary($name, $value)
    public static function Text($name, $value, $encoding = '')
    public static function UnStored($name, $value, $encoding = '')
    public static function load($data)
    public static function getPrefix($str, $length)
    public static function setDefaultSearchField($fieldName);
    public static function getDefaultSearchField();
    public static function setDefaultSearchField($fieldName)
    public static function getDefaultSearchField()
    public static function setDefaultEncoding($encoding)
    public static function getDefaultEncoding()
    public static function setDefaultOperator($operator)
    public static function getDefaultOperator()
    public static function parse($strQuery, $encoding = null)
    public static function getTypes()
    public static function setDefault(Zend_Search_Lucene_Search_Similarity $similarity)
    public static function getDefault()
    public static function decodeNorm($byte)
    static function encodeNorm($f)
    private static function _floatToByte($f)
    public static function mkdirs($dir, $mode = 0777, $recursive = true)
    public static function create($directory)
    public static function open($directory)
    public static function setDefaultSearchField($fieldName)
    public static function getDefaultSearchField()
	public static function lowerCase(&$value, &$key)
    public static function reflectClass($class, $argv = false, $namespace = '')
    public static function reflectFunction($function, $argv = false, $namespace = '')
    protected static $_httpClient = null;
	final public static function setHttpClient(Zend_Http_Client $httpClient)
	final public static function getHttpClient()
    protected static function _checkErrors(DOMDocument $dom)
    protected static function _parsePostNode(DOMElement $node)
    protected static $_lastRequestTime = 0;
    private static function _xmlResponseToArray(DOMDocument $response, $root, $child, $attKey, $attValue)
    private static function _evalXmlResult(DOMDocument $response)
    protected static function _checkErrors(DOMDocument $dom)
    protected static function _checkErrors(DOMDocument $dom)
    protected static $_writable = false;
    protected static $_readable = false;
    protected static $_expiringData = array();
    protected static function _namespaceIsset($namespace, $name = null)
    protected static function _namespaceUnset($namespace, $name = null)
    protected static function & _namespaceGet($namespace, $name = null)
    protected static function _namespaceGetAll($namespace)
    static public function handleSessionStartError($errno, $errstr)
    static public function handleSilentWriteClose($errno, $errstr)
    public static function unlockAll()
    public static function setOptions(array $userOptions = array())
    public static function setSaveHandler(Zend_Session_SaveHandler_Interface $interface)
    public static function regenerateId()
    public static function rememberMe($seconds = null)
    public static function forgetMe()
    public static function rememberUntil($seconds = 0)
    public static function sessionExists()
    public static function start($options = false)
    private static function _processStartupMetadataGlobal()
    public static function isStarted()
    public static function isRegenerated()
    public static function getId()
    public static function setId($id)
    public static function registerValidator(Zend_Session_Validator_Interface $validator)
    public static function stop()
    public static function writeClose($readonly = true)
    public static function destroy($remove_cookie = true, $readonly = true)
    public static function expireSessionCookie()
    private static function _processValidators()
    public static function namespaceIsset($namespace)
    public static function namespaceUnset($namespace)
    public static function namespaceGet($namespace)
    public static function getIterator()
    public static function isWritable()
    public static function isReadable()
    public static function check($uri)
    public static function factory($uri = 'http')
    static function getCharacters()
    static function getCharacters()
    static function getCharacters()
    static function getCharacters()
    static function getCharacters()
    static function getCharacters();
    static function getCharacters()
    static function getCharacters()
    static function getCharacters()
    public static function is($value, $classBaseName, array $args = array(), $namespaces = array())
    public static function compareVersion($version)
    public static function isFault($xml)
    public static function save($filename, Zend_XmlRpc_Server $server) 
    public static function get($filename, Zend_XmlRpc_Server $server) 
    public static function delete($filename)
    protected static $_faultExceptionClasses = array('Zend_XmlRpc_Server_Exception' => true);
    protected static $_observers = array();
    public static function getInstance(Exception $e)
    public static function attachFaultException($classes)
    public static function detachFaultException($classes)
    public static function attachObserver($class)
    public static function detachObserver($class)
    public static function getXmlRpcValue($value, $type = self::AUTO_DETECT_TYPE)
    private static function _phpVarToNativeXmlRpc($value)
    private static function _xmlStringToNativeXmlRpc($simple_xml)
